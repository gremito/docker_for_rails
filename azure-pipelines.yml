# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: USER_PASS
  displayName: Use Password
  type: string
  default: None
  values:
    - None

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:

- script: |
    if [ ${{ parameters.USER_PASS }} != "None" ]; then
        $PASS=${{ parameters.USER_PASS }}
    fi

    echo ${{ parameters.USER_PASS }}
    echo $PASS

    if [ ${{ parameters.USER_PASS }} != "None" ]; then
        $PASS=${{ parameters.USER_PASS }}
    fi

    echo ${{ parameters.USER_PASS }}
    echo $PASS

  env:
    PASS: $(PASS)

  displayName: 'Chacke Pass'  


- script: |
    mkdir "$(System.ArtifactsDirectory)/download"
    mkdir "$(Pipeline.Workspace)/download"
  displayName: 'Init'  

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'specific'
    project: 'gremito.net'
    artifactName: 'b-centos-php7-lamp'
    pipeline: '4'
    buildId: '28'
    downloadPath: "$(System.ArtifactsDirectory)/download"

- script: |
    ls -lt "$(System.ArtifactsDirectory)/download"
  displayName: 'ls -lt DownloadBuildArtifacts' 

- script: |
    cat "$(System.ArtifactsDirectory)/download/b-centos-php7-lamp/bin/share.txt"
  displayName: 'Check the contents of DownloadBuildArtifacts share.txt'  

- task: DownloadPipelineArtifact@2
  inputs:
    source: 'specific'
    project: 'gremito.net'
    pipeline: 4
    runVersion: 'latest'
    path: "$(Pipeline.Workspace)/download"

- script: |
    ls -lt "$(Pipeline.Workspace)/download"
  displayName: 'ls -lt DownloadPipelineArtifact'  

- script: |
    cat "$(Pipeline.Workspace)/download/p-centos-php7-lamp/a/bin/share.txt"
  displayName: 'Check the contents of DownloadPipelineArtifact share.txt'  

# - script: |
#     docker -v
#     docker version -f '{{.Server.Experimental}}'
#     docker-compose -v
#     docker login -u $(DOCKER_ID) -p $(DOCKER_PW)
#   displayName: 'prepare'

# # - script: |
# #     docker pull nginx:alpine
# #     docker tag nginx:alpine matoba/nginx
# #   displayName: 'build'

# - script: |
#     docker-compose build
#     docker-compose up -d
#   displayName: 'run'

# - script: |
#     curl -i http://127.0.0.1:3000/
#   displayName: 'test'
